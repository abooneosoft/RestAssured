package org.base;


	import io.restassured.RestAssured;
	import io.restassured.http.Method;
	import io.restassured.response.Response;
	import io.restassured.specification.RequestSpecification;
	import org.apache.poi.ss.usermodel.Sheet;
	import org.apache.poi.ss.usermodel.Workbook;
	import org.apache.poi.xssf.usermodel.XSSFWorkbook;
	import org.testng.Assert;
	import com.fasterxml.jackson.databind.ObjectMapper;

	import java.io.File;
	import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
	import java.util.Map;

	public class BaseClass {

	    public static RequestSpecification requestSpecification;

	    // Method to initialize the request object with base URI
	    public static void requestObject(String baseUri) {
	        RestAssured.baseURI = baseUri;
	        requestSpecification = RestAssured.given();
	    }

	    // Method to add query parameters
	    public static void addQueryParameter(String parameterName, String parameterValue) {
	        requestSpecification.queryParam(parameterName, parameterValue);
	    }

	    // Method to add path parameters
	    public static void addPathParameter(String parameterName, String parameterValue) {
	        requestSpecification.pathParam(parameterName, parameterValue);
	    }

	    // Method to create a response object based on the request type
	    public static Response createResponseObj(String requestType, String resources) {
	        switch (requestType) {
	            case "GET":
	                return requestSpecification.request(Method.GET, resources);
	            case "POST":
	                return requestSpecification.request(Method.POST, resources);
	            case "PUT":
	                return requestSpecification.request(Method.PUT, resources);
	            case "DELETE":
	                return requestSpecification.request(Method.DELETE, resources);
	            default:
	                throw new IllegalArgumentException("Invalid request type: " + requestType);
	        }
	    }

	    // Method to validate the response status code
	    public static void validateResponseCode(String requestType, Response response) {
	        int statusCode = response.getStatusCode();
	        switch (requestType) {
	            case "GET":
	            case "PUT":
	                Assert.assertEquals(statusCode, 200);
	                System.out.println("Validation of Status Code is 200");
	                break;
	            case "POST":
	                Assert.assertEquals(statusCode, 201);
	                System.out.println("Validation of Status Code is 201");
	                break;
	            case "DELETE":
	                Assert.assertEquals(statusCode, 204);
	                System.out.println("Validation of Status Code is 204 (Deleted)");
	                break;
	            default:
	                throw new IllegalArgumentException("Invalid request type: " + requestType);
	        }
	    }

	    // Method to print the response body
	    public static void printResponseBody(Response response) {
	        String asPrettyString = response.getBody().asPrettyString();
	        System.out.println(asPrettyString);
	    }

	    // Method to read data from an Excel file
	    public static String readDataFromExcel(int rownum, int cellnum) throws FileNotFoundException, IOException {
			Workbook w = new XSSFWorkbook(new FileInputStream(new File(
					"C:\\Users\\Admin\\eclipse-workspace\\ApiAutomation\\src\\test\\resources\\ApiAutomation.xlsx")));
			Sheet sheet = w.getSheet("Sheet1");
			String stringCellValue = sheet.getRow(rownum).getCell(cellnum).getStringCellValue();
			return stringCellValue;
		}

	    // Method to read a JSON file and return it as a Map<String, String>
	    public static Map<String, String> readJson(String filePath) throws IOException {
	        ObjectMapper mapper = new ObjectMapper();
	        return mapper.readValue(new File(filePath), Map.class);
	    }

	    // Example method to add headers from JSON to request
	    public static void addHeadersFromJson(String filePath) throws IOException {
	        Map<String, String> headers = readJson(filePath);
	        requestSpecification.headers(headers);
	    }
	}


